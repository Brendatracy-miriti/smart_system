# Generated by Django 5.2.7 on 2025-10-06 14:32

import cloudinary.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('student', 'Student'), ('teacher', 'Teacher'), ('parent', 'Parent'), ('admin', 'Admin'), ('mentor', 'Mentor')], help_text='Determines which dashboard and permissions the user has', max_length=10)),
                ('phone_number', models.CharField(blank=True, max_length=15)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('address', models.TextField(blank=True)),
                ('avatar', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='image')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('at_risk_score', models.IntegerField(default=0, help_text='0-100 score indicating dropout risk (0 = low risk, 100 = high risk)')),
                ('last_risk_assessment', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='admin', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('department', models.CharField(max_length=100)),
                ('role', models.CharField(max_length=100)),
                ('can_manage_finances', models.BooleanField(default=False)),
                ('can_manage_transport', models.BooleanField(default=False)),
                ('can_view_risk_reports', models.BooleanField(default=True)),
                ('can_manage_users', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Mentor',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='mentor', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('expertise_areas', models.CharField(help_text='Areas of expertise (comma-separated)', max_length=200)),
                ('grade_levels', models.CharField(help_text='Grade levels they can mentor', max_length=100)),
                ('availability', models.JSONField(default=dict, help_text='Weekly availability schedule')),
                ('rating', models.FloatField(default=5.0)),
                ('students_mentored', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='parent', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('occupation', models.CharField(blank=True, max_length=100)),
                ('relationship_to_student', models.CharField(default='Parent', max_length=50)),
                ('can_view_financial_reports', models.BooleanField(default=False, help_text='Can this parent view school financial reports?')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='student', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('grade', models.CharField(help_text="Current grade level (e.g., 'Grade 10', 'Form 4')", max_length=10)),
                ('enrollment_date', models.DateField(auto_now_add=True)),
                ('attendance_rate', models.FloatField(default=100.0, help_text='Percentage attendance (0-100)')),
                ('average_grade', models.FloatField(default=0.0, help_text='Overall academic average')),
                ('behavioral_incidents', models.IntegerField(default=0, help_text='Number of behavioral issues reported')),
                ('last_wellness_check', models.DateTimeField(blank=True, null=True)),
                ('bus_route', models.CharField(blank=True, max_length=50)),
                ('bus_stop', models.CharField(blank=True, max_length=100)),
                ('preferred_learning_style', models.CharField(choices=[('visual', 'Visual Learner'), ('auditory', 'Auditory Learner'), ('kinesthetic', 'Kinesthetic Learner'), ('reading', 'Reading/Writing Learner')], default='visual', help_text='Used to personalize study materials', max_length=20)),
                ('parent', models.ForeignKey(blank=True, help_text='Linked parent account', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='accounts.parent')),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='teacher', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('subjects', models.CharField(help_text='Subjects taught (comma-separated)', max_length=200)),
                ('qualification', models.TextField(help_text='Teaching qualifications')),
                ('hire_date', models.DateField(auto_now_add=True)),
                ('is_mentor', models.BooleanField(default=False, help_text='Can this teacher serve as a mentor?')),
                ('mentor_subjects', models.CharField(blank=True, help_text='Subjects available for mentorship', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='SchoolFinancialRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('record_type', models.CharField(choices=[('income', 'Income'), ('expense', 'Expense'), ('budget', 'Budget')], max_length=10)),
                ('description', models.TextField()),
                ('date', models.DateField()),
                ('category', models.CharField(help_text='e.g., Infrastructure, Salaries, Transport, Supplies', max_length=100)),
                ('is_public', models.BooleanField(default=False, help_text='Can parents view this record?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_financial_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TransportRoute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('route_name', models.CharField(max_length=100)),
                ('driver_name', models.CharField(max_length=100)),
                ('driver_contact', models.CharField(max_length=15)),
                ('vehicle_number', models.CharField(max_length=20)),
                ('current_location', models.CharField(blank=True, max_length=200)),
                ('is_active', models.BooleanField(default=True)),
                ('students_on_board', models.ManyToManyField(blank=True, related_name='transport_routes', to='accounts.student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentRiskAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_date', models.DateTimeField(auto_now_add=True)),
                ('risk_score', models.IntegerField(help_text='0-100 risk score')),
                ('factors', models.JSONField(help_text='List of risk factors identified')),
                ('recommendations', models.TextField(help_text='Recommended interventions')),
                ('assessed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conducted_assessments', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='risk_assessments', to='accounts.student')),
            ],
            options={
                'ordering': ['-assessment_date'],
            },
        ),
    ]
